GIL - Global interpreter lock
This is a mutex (or a lock) that allows only one thread to hold control of the Python interpreter.
This means that the GIL allows only one thread to execute at a time even in a multi-threaded architecture.

Why is it needed?
It is needed because CPython's (reference implementation of Python) memory management is not thread-safe.
Python uses reference counting for memory management. It means that objects created in Python have a reference count
variable that keeps track of the number of references that point to the object. When this count reaches zero,
the memory occupied by the object is released. The problem was that this reference count variable needed protection
from race conditions where two threads increase or decrease its value simultaneously. If this happens,
it can cause either leaked memory that is never released or incorrectly release the memory while a reference
to that object still exists.

How to avoid the GIL
The GIL is very controversial in the Python community.
The main way to avoid the GIL is by using multiprocessing instead of threading.
Another (however uncomfortable) solution would be to avoid the CPython implementation and use a
free-threaded Python implementation like Jython or IronPython. A third option is to move parts of
the application out into binary extensions modules, i.e.
use Python as a wrapper for third party libraries (e.g. in C/C++).
This is the path taken by numypy and scipy.